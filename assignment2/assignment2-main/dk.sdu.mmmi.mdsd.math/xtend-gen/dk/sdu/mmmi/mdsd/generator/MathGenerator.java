/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.math.Div;
import dk.sdu.mmmi.mdsd.math.Exp;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.Minus;
import dk.sdu.mmmi.mdsd.math.Multi;
import dk.sdu.mmmi.mdsd.math.Parenthesis;
import dk.sdu.mmmi.mdsd.math.Plus;
import dk.sdu.mmmi.mdsd.math.VariableUse;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathGenerator extends AbstractGenerator {
  private static Map<String, Integer> variables = new HashMap<String, Integer>();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    final Map<String, Integer> result = MathGenerator.compute(math);
    this.displayPanel(result);
  }
  
  public static Map<String, Integer> compute(final MathExp math) {
    for (int i = 0; (i < ((Object[])Conversions.unwrapArray(math.getExps(), Object.class)).length); i++) {
      MathGenerator.variables.put(math.getExps().get(i).getName(), Integer.valueOf(MathGenerator.computeExp(math.getExps().get(i).getExp())));
    }
    return MathGenerator.variables;
  }
  
  public static int computeExp(final Exp exp) {
    Integer _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      int _computeExp = MathGenerator.computeExp(((Plus)exp).getLeft());
      int _computeExp_1 = MathGenerator.computeExp(((Plus)exp).getRight());
      _switchResult = Integer.valueOf((_computeExp + _computeExp_1));
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        int _computeExp = MathGenerator.computeExp(((Minus)exp).getLeft());
        int _computeExp_1 = MathGenerator.computeExp(((Minus)exp).getRight());
        _switchResult = Integer.valueOf((_computeExp - _computeExp_1));
      }
    }
    if (!_matched) {
      if (exp instanceof Multi) {
        _matched=true;
        int _computeExp = MathGenerator.computeExp(((Multi)exp).getLeft());
        int _computeExp_1 = MathGenerator.computeExp(((Multi)exp).getRight());
        _switchResult = Integer.valueOf((_computeExp * _computeExp_1));
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        int _computeExp = MathGenerator.computeExp(((Div)exp).getLeft());
        int _computeExp_1 = MathGenerator.computeExp(((Div)exp).getRight());
        _switchResult = Integer.valueOf((_computeExp / _computeExp_1));
      }
    }
    if (!_matched) {
      if (exp instanceof dk.sdu.mmmi.mdsd.math.Number) {
        _matched=true;
        _switchResult = Integer.valueOf(((dk.sdu.mmmi.mdsd.math.Number)exp).getValue());
      }
    }
    if (!_matched) {
      if (exp instanceof Parenthesis) {
        _matched=true;
        _switchResult = Integer.valueOf(MathGenerator.computeExp(((Parenthesis)exp).getExp()));
      }
    }
    if (!_matched) {
      if (exp instanceof VariableUse) {
        _matched=true;
        _switchResult = MathGenerator.variables.get(((VariableUse)exp).getRef().getName());
      }
    }
    if (!_matched) {
      _switchResult = Integer.valueOf(0);
    }
    return (_switchResult).intValue();
  }
  
  public void displayPanel(final Map<String, Integer> result) {
    String resultString = "";
    Set<Map.Entry<String, Integer>> _entrySet = result.entrySet();
    for (final Map.Entry<String, Integer> entry : _entrySet) {
      String _resultString = resultString;
      String _key = entry.getKey();
      String _plus = ("var " + _key);
      String _plus_1 = (_plus + " = ");
      Integer _value = entry.getValue();
      String _plus_2 = (_plus_1 + _value);
      String _plus_3 = (_plus_2 + "\n");
      resultString = (_resultString + _plus_3);
    }
    JOptionPane.showMessageDialog(null, resultString, "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
}
